1. 添加新POST字段已经相关的test case：update_sub_Field/enent_field
2. 添加对应的enum
3. 添加对应的error
1. db structure
	user
	user sugar
	
	
2. api


1. 如果字段的值是数组[ObjectId]/[enum]，需要检查是不是有重复值（防止重复元素，例如，同一条评论出现多次），在一个新的函数中（而不是validateValue）检测重复
2. 把除了admin_user之外的所有model中，field类型为enum的，全部改成String===>done
3. 新增数据类型bollean，需要在validateHelper-valueTypeCheck中添加对其的检查(validateValue调用此函数进行type的检测)

1. 添加新表 recommend（记录用户的推荐（以及用户收到的推荐））/admin_penalize（记录管理员直接对普通用户做出的处罚，包括禁止写文档/系列/评论）/topic（普通用户新建的系列）/user_punished_history(记录用户的处罚历史已经处罚状态)=========>done

1. 添加新表，给用户存储收藏的文档==========> done: collection
1.1 只有一级目录
1.2 字段：creatorId/name（收藏夹名称）/articlesId（收藏夹中的文档）


1. install gm========>done


1. dataConvert es7化===>done
2. internalInputRule中，如果是enum，直接使用model/mongo/enumValue，而不是使用Object.values方法（节省资源）====>done

1. controller中，添加validatePartFormat，对各part的format进行检查，防止recordInfo中出现不存在field的错误===>done
2. 添加API，对单独字段进行unique进行检查（以便client及时反馈结果给用户）========>done

1. 设定新enum，inputFieldCheckType，BASE_INPUTRULE,BASE_INPUT=======>done(暂时只用在_validateRecorderValue，validateSingleFieldValue的代码做了简化，不需要用此enum)


1. user->update->password需要hash后和原始记录比较======》done


1. API中，一旦输入参数检查通过，立刻调用函数转换成{field:value}的形式=====>done
2. 使用公司邮件发邮件（且为历史账号）=======>fail(不知SMTP配置)


1. mongoose升级到4.11.6后，使用populate获得user（uploadPhoto）中的photoPathId对应的path（临时使用另外一个查询获得）

1. 添加daily 查询，用来检查是否有头像文件未被记录在db中====》遍历目录下所有文件，是否在db中有对应的记录

1. 在helper中添加新函数，通过检查admin_penalize表，确定user是否有权进行CRUD的操作====>done
2. 在helper中添加新函数，通过某种算法，判断是否为机器人在创建文档和评论（暂时通过间隔，每次发表新评论或者新文档必须间隔1分钟）

1. 创建评论====》done

1. unique检测函数化=====>done
2. preCheck_async应用到user====>done

1. 添加新表; user_resource_profile，确定当前用户使用的resource_profile====>done
2. user注册后，自动为user_resource_profile添加新纪录（per art/per person)====>done
3. 每当用户上传新图片，或者更新文档，需要重新计算 resource-pforile_static的内容
4. 添加mongodb group操作的函数：参数：1. dbModel，2 match 3 聚合操作类型（sum/min/max/avg)

1. 如何在impeach中区分是对article还是comment进行的？============》 使用URL进行区分

1. 更新举报状态的时候，需要根据用户检测上传的状态是否允许（例如，只有管理员能结束举报；只有普通用户能new一个举报等）
1. 添加API, 记录impeach状态的改变
2. 添加func，判断enum是否重复=======>done in checker
3. admin_user: create/update；添加检测priority是否有重复=========》 done
3. admin_user: create/update；添加检测当前用户是否拥有对应的C/U权限=========》done
4. 添加func，检测指定adminUser是否拥有指定的权限=====>done in checker